{"version":3,"sources":["serviceWorker.js","TemplateForm/index.jsx","App.jsx","index.jsx","mail.svg","TemplateForm/styles.module.scss"],"names":["Boolean","window","location","hostname","match","schema","Yup","mailTo","required","TemplateForm","useState","tinyUrlResponse","setTinyUrlResponse","tinyUrlResponseError","setTinyUrlResponseError","className","styles","description","instructions","href","rel","target","validationSchema","onSubmit","values","body","encodeURIComponent","subject","data","cc","bcc","alias","TinyURL","shortenWithAlias","then","res","initialValues","handleSubmit","handleChange","errors","Form","noValidate","form","Group","as","Col","md","controlId","formGroup","Label","label","Control","type","name","value","onChange","isInvalid","placeholder","rows","customUrl","Button","size","button","App","src","mail","alt","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.c227f46a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import * as Yup from 'yup'\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport React, { useState } from 'react'\nimport TinyURL from 'tinyurl'\nimport { Formik } from 'formik'\n\nimport styles from './styles.module.scss'\n\n\nconst schema = Yup.object({\n  mailTo: Yup.string().required(),\n})\n\nexport const TemplateForm = () => {\n    const [tinyUrlResponse, setTinyUrlResponse] = useState('')\n    const [tinyUrlResponseError, setTinyUrlResponseError] = useState('')\n\n    return (\n        <>\n          <h5 className={styles.description}>Create a shareable email campaign</h5>\n          <a className={styles.instructions} href=\"https://tinyurl.com/emailtemplatedirections\" rel=\"noopener noreferrer\" target=\"_blank\">Instructions</a>\n          <p className={styles.tinyUrlResponse}>{tinyUrlResponse}</p>\n          <Formik\n              validationSchema={schema}\n              onSubmit={(values) => {\n                const body = encodeURIComponent(values.body)\n                const subject = encodeURIComponent(values.subject)\n\n                const link = `mailTo:${values.mailTo}?cc=${values.cc}&bcc=${values.bcc}&subject=${subject}&body=${body}`\n                const data = { 'url': link, 'alias': values.alias }\n\n                TinyURL.shortenWithAlias(data).then(function(res) {\n                  if (res === 'Error'){\n                    setTinyUrlResponseError(values.alias)\n                  }\n                  else {\n                    setTinyUrlResponseError('')\n                    setTinyUrlResponse(<a href={`${res}`} rel=\"noopener noreferrer\" target=\"_blank\">{res}</a>)\n                  }\n                })\n\n              }}\n              initialValues={{\n                  mailTo: '',\n                  cc: '',\n                  bcc: '',\n                  subject: '',\n                  body: '',\n                  alias: '',\n              }}\n          >\n              {({\n                  handleSubmit,\n                  handleChange,\n                  errors,\n                  values,\n              }) => (\n                  <Form noValidate onSubmit={handleSubmit} className={styles.form}>\n                    <Form.Group as={Col} md=\"6\" controlId=\"validationFormikMailTo\" className={styles.formGroup}>\n                        <Form.Label className={styles.label}>To</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            name=\"mailTo\"\n                            value={values.mailTo}\n                            onChange={handleChange}\n                            isInvalid={!!errors.mailTo}\n                        />\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"6\" controlId=\"validationFormikCC\" className={styles.formGroup}>\n                        <Form.Label className={styles.label}>cc</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            name=\"cc\"\n                            value={values.cc}\n                            onChange={handleChange}\n                        />\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"6\" controlId=\"validationFormikBCC\" className={styles.formGroup}>\n                        <Form.Label className={styles.label}>bcc</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"\"\n                            name=\"bcc\"\n                            value={values.bcc}\n                            onChange={handleChange}\n                        />\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"6\" controlId=\"validationFormikSubject\" className={styles.formGroup}>\n                        <Form.Label className={styles.label}>Subject</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"\"\n                            name=\"subject\"\n                            value={values.subject}\n                            onChange={handleChange}\n                        />\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"6\" controlId=\"validationFormikBody\" className={styles.formGroup}>\n                        <Form.Label className={styles.label}>Message</Form.Label>\n                        <Form.Control\n                            as=\"textarea\"\n                            type=\"text\"\n                            placeholder=\"\"\n                            name=\"body\"\n                            rows=\"5\"\n                            value={values.body}\n                            onChange={handleChange}\n                        />\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"6\" controlId=\"validationFormikCustomUrl\" className={styles.customUrl}>\n                        <Form.Label className={styles.label}>Custom Url</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            name=\"alias\"\n                            value={values.alias}\n                            isInvalid={tinyUrlResponseError}\n                            onChange={handleChange}\n                        />\n                    </Form.Group>\n\n                    {tinyUrlResponseError && <Form.Group as={Col} md=\"6\" className={styles.tinyUrlResponseError}>\n                      <a href={`https://tinyurl.com/${tinyUrlResponseError}`} rel=\"noopener noreferrer\" target=\"_blank\">{`https://tinyurl.com/${tinyUrlResponseError}`}</a> has already been claimed. Please try a different custom url.\n                    </Form.Group>}\n                    <Button type=\"submit\" size=\"lg\" className={styles.button}>Submit form</Button>\n                  </Form>\n              )}\n          </Formik>\n      </>\n    )\n}\n","import React from 'react'\n\nimport './App.css'\nimport mail from './mail.svg'\nimport { TemplateForm } from './TemplateForm/index'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={mail} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <main>\n        <TemplateForm />\n      </main>\n      <footer>\n        {/* <div>Icons made by <a href=\"https://www.flaticon.com/authors/kiranshastry\" title=\"Kiranshastry\">Kiranshastry</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div> */}\n    </footer>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mail.f54212c1.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__lZAnQ\",\"formGroup\":\"styles_formGroup__32aqf\",\"customUrl\":\"styles_customUrl__3D0dh\",\"label\":\"styles_label__3iXkJ\",\"button\":\"styles_button__3AaxP\",\"tinyUrlResponse\":\"styles_tinyUrlResponse__3LyQV\",\"tinyUrlResponseError\":\"styles_tinyUrlResponseError__hahyS\",\"instructions\":\"styles_instructions__1FAix\"};"],"sourceRoot":""}